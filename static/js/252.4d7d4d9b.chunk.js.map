{"version":3,"sources":["service/Notice/Tabs/All.js","service/Notice/Tabs/Announcement.js","service/Notice/Tabs/Events.js","service/Notice/Banner/index.js","service/Notice/index.js"],"names":["enhance","compose","setDisplayName","displayName","inject","injectIntl","withHandlers","handleOnDataChange","_ref","noticeStore","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee","pagination","filters","sorter","wrap","_context","prev","next","setPageParams","page","current","perPage","pageSize","order","name","field","sorting","fetchNotices","stop","_x","_x2","_x3","apply","this","arguments","handleOnExpand","_ref3","expanded","record","toggleExpandByKey","key","lifecycle","componentDidMount","_componentDidMount","_callee2","_context2","props","observer","getColumns","intl","title","formatMessage","id","dataIndex","render","text","react_default","createElement","className","type","format","Date","created","_ref4","_ref4$noticeStore","notices","state","table","loading","REQUEST_STATE","LOADING","rowKey","expandedRowKeys","expandedRowRender","style","padding","dangerouslySetInnerHTML","__html","content","total","totalElements","showSizeChanger","columns","dataSource","contents","onChange","onExpand","expandRowByClick","setAnnouncePageParams","fetchAnnounces","toggleExpandAnnouncementByKey","announces","setEventPageParams","fetchEvents","toggleExpandEventByKey","events","TabPane","Tabs","Fragment","Notice_Banner","tabs","defaultActiveKey","size","tab","Announcement","getTabSource","map","i"],"mappings":"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","file":"static/js/252.4d7d4d9b.chunk.js","sourcesContent":["import React from 'react'\nimport { Table } from 'antd'\nimport { format } from 'date-fns'\nimport { observer, inject } from 'mobx-react'\nimport { compose, setDisplayName, withHandlers, lifecycle } from 'recompose'\nimport { injectIntl } from 'react-intl'\nimport { REQUEST_STATE } from '../../../constants/Values'\n\nconst enhance = compose(\n  setDisplayName({\n    displayName: 'NoticeAll',\n  }),\n  inject('noticeStore'),\n  injectIntl,\n  withHandlers({\n    handleOnDataChange: ({ noticeStore }) => async (pagination, filters, sorter) => {\n      noticeStore.setPageParams({\n        page: pagination.current,\n        perPage: pagination.pageSize,\n        order: {\n          name: sorter.field ? sorter.field : 'id',\n          sorting: sorter.order ? (sorter.order === 'ascend' ? 'asc' : 'desc') : 'desc', // or desc\n        },\n      })\n\n      await noticeStore.fetchNotices()\n    },\n    handleOnExpand: ({ noticeStore }) => (expanded, record) => {\n      noticeStore.toggleExpandByKey(record.key)\n    },\n  }),\n  lifecycle({\n    async componentDidMount() {\n      await this.props.noticeStore.fetchNotices()\n    },\n  }),\n  observer\n)\n\nconst getColumns = intl => {\n  return [\n    {\n      title: intl.formatMessage({ id: 'Classify' }),\n      dataIndex: 'type',\n      key: 'type',\n      render: (text, record) => <div className=\"table-product-description-container\">{record.type}</div>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Title' }),\n      dataIndex: 'title',\n      key: 'title',\n      render: (text, record) => <span>{record.title}</span>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Date' }),\n      dataIndex: 'created',\n      key: 'created',\n      render: (text, record) => <span>{format(new Date(record.created), 'DD/MM/YYYY')}</span>,\n      sorter: true,\n    },\n  ]\n}\n\nexport default enhance(({ noticeStore: { notices, state }, handleOnDataChange, handleOnExpand, intl }) => (\n  <div className=\"notice-announcement\">\n    <Table\n      loading={state === REQUEST_STATE.LOADING}\n      rowKey=\"key\"\n      expandedRowKeys={notices.expandedRowKeys}\n      expandedRowRender={record => (\n        <div style={{ padding: '8px 0px' }} dangerouslySetInnerHTML={{ __html: record.content }} />\n      )}\n      pagination={{\n        total: notices.totalElements,\n        showSizeChanger: true,\n        pageSize: notices.pageSize,\n      }}\n      columns={getColumns(intl)}\n      dataSource={notices.contents}\n      onChange={handleOnDataChange}\n      onExpand={handleOnExpand}\n      expandRowByClick={true}\n    />\n  </div>\n))\n","import React from 'react'\nimport { Table } from 'antd'\nimport { format } from 'date-fns'\nimport { observer, inject } from 'mobx-react'\nimport { compose, setDisplayName, withHandlers, lifecycle } from 'recompose'\nimport { injectIntl } from 'react-intl'\nimport { REQUEST_STATE } from '../../../constants/Values'\n\nconst enhance = compose(\n  setDisplayName({\n    displayName: 'NoticeAnnouncement',\n  }),\n  inject('noticeStore'),\n  injectIntl,\n  withHandlers({\n    handleOnDataChange: ({ noticeStore }) => async (pagination, filters, sorter) => {\n      noticeStore.setAnnouncePageParams({\n        page: pagination.current,\n        perPage: pagination.pageSize,\n        order: {\n          name: sorter.field ? sorter.field : 'id',\n          sorting: sorter.order ? (sorter.order === 'ascend' ? 'asc' : 'desc') : 'desc', // or desc\n        },\n      })\n\n      await noticeStore.fetchAnnounces()\n    },\n    handleOnExpand: ({ noticeStore }) => (expanded, record) => {\n      noticeStore.toggleExpandAnnouncementByKey(record.key)\n    },\n  }),\n  lifecycle({\n    async componentDidMount() {\n      await this.props.noticeStore.fetchAnnounces()\n    },\n  }),\n  observer\n)\n\nconst getColumns = intl => {\n  return [\n    {\n      title: intl.formatMessage({ id: 'Classify' }),\n      dataIndex: 'type',\n      key: 'type',\n      render: (text, record) => <div className=\"table-product-description-container\">{record.type}</div>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Title' }),\n      dataIndex: 'title',\n      key: 'title',\n      render: (text, record) => <span>{record.title}</span>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Date' }),\n      dataIndex: 'created',\n      key: 'created',\n      render: (text, record) => <span>{format(new Date(record.created), 'DD/MM/YYYY')}</span>,\n      sorter: true,\n    },\n  ]\n}\n\nexport default enhance(({ noticeStore: { announces, state }, handleOnDataChange, handleOnExpand, intl }) => (\n  <div className=\"notice-announcement\">\n    <Table\n      loading={state === REQUEST_STATE.LOADING}\n      rowKey=\"key\"\n      expandedRowKeys={announces.expandedRowKeys}\n      expandedRowRender={record => (\n        <div style={{ padding: '8px 0px' }} dangerouslySetInnerHTML={{ __html: record.content }} />\n      )}\n      pagination={{\n        total: announces.totalElements,\n        showSizeChanger: true,\n        pageSize: announces.pageSize,\n      }}\n      columns={getColumns(intl)}\n      dataSource={announces.contents}\n      onChange={handleOnDataChange}\n      onExpand={handleOnExpand}\n      expandRowByClick={true}\n    />\n  </div>\n))\n","import React from 'react'\nimport { Table } from 'antd'\nimport { format } from 'date-fns'\nimport { observer, inject } from 'mobx-react'\nimport { compose, setDisplayName, withHandlers, lifecycle } from 'recompose'\nimport { injectIntl } from 'react-intl'\nimport { REQUEST_STATE } from '../../../constants/Values'\n\nconst enhance = compose(\n  setDisplayName({\n    displayName: 'NoticeEvent',\n  }),\n  inject('noticeStore'),\n  injectIntl,\n  withHandlers({\n    handleOnDataChange: ({ noticeStore }) => async (pagination, filters, sorter) => {\n      noticeStore.setEventPageParams({\n        page: pagination.current,\n        perPage: pagination.pageSize,\n        order: {\n          name: sorter.field ? sorter.field : 'id',\n          sorting: sorter.order ? (sorter.order === 'ascend' ? 'asc' : 'desc') : 'desc', // or desc\n        },\n      })\n\n      await noticeStore.fetchEvents()\n    },\n    handleOnExpand: ({ noticeStore }) => (expanded, record) => {\n      noticeStore.toggleExpandEventByKey(record.key)\n    },\n  }),\n  lifecycle({\n    async componentDidMount() {\n      await this.props.noticeStore.fetchEvents()\n    },\n  }),\n  observer\n)\n\nconst getColumns = intl => {\n  return [\n    {\n      title: intl.formatMessage({ id: 'Classify' }),\n      dataIndex: 'type',\n      key: 'type',\n      render: (text, record) => <div className=\"table-product-description-container\">{record.type}</div>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Title' }),\n      dataIndex: 'title',\n      key: 'title',\n      render: (text, record) => <span>{record.title}</span>,\n      sorter: true,\n    },\n    {\n      title: intl.formatMessage({ id: 'Date' }),\n      dataIndex: 'created',\n      key: 'created',\n      render: (text, record) => <span>{format(new Date(record.created), 'DD/MM/YYYY')}</span>,\n      sorter: true,\n    },\n  ]\n}\n\nexport default enhance(({ noticeStore: { events, state }, handleOnDataChange, handleOnExpand, intl }) => (\n  <div className=\"notice-announcement\">\n    <Table\n      loading={state === REQUEST_STATE.LOADING}\n      rowKey=\"key\"\n      expandedRowKeys={events.expandedRowKeys}\n      expandedRowRender={record => (\n        <div style={{ padding: '8px 0px' }} dangerouslySetInnerHTML={{ __html: record.content }} />\n      )}\n      pagination={{\n        total: events.totalElements,\n        showSizeChanger: true,\n        pageSize: events.pageSize,\n      }}\n      columns={getColumns(intl)}\n      dataSource={events.contents}\n      onChange={handleOnDataChange}\n      onExpand={handleOnExpand}\n      expandRowByClick={true}\n    />\n  </div>\n))\n","import React from 'react'\nimport { injectIntl } from 'react-intl'\nimport './index.scss'\n\nconst NoticeBanner = ({ intl }) => (\n  <div>\n    <div className=\"notice-container\">\n      <div className=\"notice-main-message\">{intl.formatMessage({ id: 'Notice' })}</div>\n    </div>\n  </div>\n)\n\nexport default injectIntl(NoticeBanner)\n","import React from 'react'\nimport { Tabs } from 'antd'\nimport { All, Announcement, Events } from './Tabs'\nimport { injectIntl } from 'react-intl'\n\nimport Banner from './Banner'\nimport './index.scss'\n\nconst TabPane = Tabs.TabPane\n\nconst getTabSource = intl => {\n  return [\n    // {\n    //   tab: intl.formatMessage({ id: 'All' }),\n    //   key: 'all',\n    //   content: <All />,\n    // },\n    {\n      tab: intl.formatMessage({ id: 'Announcement' }),\n      key: 'announcement',\n      content: <Announcement />,\n    },\n    // {\n    //   tab: intl.formatMessage({ id: 'Events' }),\n    //   key: 'events',\n    //   content: <Events />,\n    // },\n  ]\n}\n\nexport default injectIntl(({ intl }) => (\n  <>\n    <Banner />\n\n    <Tabs className=\"notice-tabs\" defaultActiveKey=\"announcement\" size={'large'}>\n      {getTabSource(intl).map(i => (\n        <TabPane className=\"tab-content-base\" tab={i.tab} key={i.key}>\n          {i.content}\n        </TabPane>\n      ))}\n    </Tabs>\n  </>\n))\n"],"sourceRoot":""}